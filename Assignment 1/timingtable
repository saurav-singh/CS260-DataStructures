#CS 260 - Data Structure
#Saurav Singh - sms668

Time Performance result:
-----------------------
- Performed for 1000 elements each
- Unit of time: second
_____________________________________________________________________________________________________
|Data Structure | insertion(back) | insertion(front) | deletion(back) | deletion(front) | traversal |
-----------------------------------------------------------------------------------------------------
|   Array List  |   0.007         |     1.015        |      0.008     |     1.375       |   0.004   |
|   Poiner List |   3.866         |     5.566        |      5.462     |     3.454       |   5.692   |
|   STD::List   |   0.096         |     0.095        |      0.055     |     0.061       |   0.001   |
-----------------------------------------------------------------------------------------------------
______________________________________
|Data Structure   |   PUSH  |   POP   |
--------------------------------------
|   Array Stack   | 0.004   |   0.005 | 
|   Pointer Stack | 0.014   |   0.006 |
|   STD::Stack    | 0.023   |   0.014 |
---------------------------------------

Conclusion:
- Array implementation of data Structures are much faster than pointer implementation.
- insertion and deletion at back of the list much faster than at the front.
- In terms of list, the std library list was faster than our pointer implementation but 
    slower than the array implementation. It could either mean its also an array based 
    with more features or maybe a much more efficient pointer based implementation.
- In terms of stack, the std library was slower than both out array an pointer implementation.
- Although the array implementation are faster, the limitation is that we need to define
    a fixed max size while in pointer based the size is dynamic.